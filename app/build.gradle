plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.github.ben-manes.versions' version "0.39.0"
    id 'io.sentry.android.gradle'
    id "org.gradle.android.cache-fix" version "2.4.2" apply false
}

//apply from: "${rootProject.projectDir}/flavors.gradle"

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    compileSdkVersion Config.compileSdkVersion
    buildToolsVersion Config.buildToolVersion
    defaultConfig {
        applicationId "com.project.noticeme"
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndkVersion '22.1.7171670'
        ndk {
            debugSymbolLevel 'SYMBOL_TABLE'
            debugSymbolLevel 'FULL'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [environment: "production"]
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "noticeme-${variant.versionName}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [environment: "staging"]
        }
    }

//    with flavorConfig

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    lintOptions {
        abortOnError false
        disable 'UnsafeExperimentalUsageError', 'UnsafeExperimentalUsageWarning', 'ContentDescription'
    }
    configurations {
        ktlint
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(Modules.commonUi)
    implementation project(Modules.commonUtils)
    implementation project(Modules.data)

    implementation Libs.kotlinStdLib
    implementation Libs.coroutineCore
    implementation Libs.coroutineAndroid

    implementation Libs.appcompat
    implementation Libs.coreKtx
    implementation Libs.constraintlayout
    implementation Libs.material
    implementation Libs.activity
    implementation Libs.activityKtx
    implementation Libs.legacySupport
    implementation Libs.recyclerview
    implementation Libs.viewpager2

    implementation Libs.lifeCyle
    implementation Libs.viewModel
    implementation Libs.liveData

    implementation Libs.startUp
    implementation Libs.navUi
    implementation Libs.navUiKtx
    implementation Libs.navFragment
    implementation Libs.navFragmentKtx

    implementation Libs.retrofit
    implementation Libs.gson
    implementation Libs.gsonConverter
    implementation Libs.okhttp
    implementation Libs.loggingInterceptor

    implementation Libs.hiltAndroid
//    implementation Libs.hiltViewModel
    kapt Libs.hiltAndroidCompiler
    kapt Libs.hiltCompiler

    // Room
    implementation Libs.roomRuntime
    implementation Libs.roomKtx
    kapt Libs.roomCompiler

    implementation Libs.timber
    implementation Libs.stetho
    implementation Libs.stethoOkhttp3
    implementation Libs.sentry
//    debugImplementation Libs.leakcanary

    implementation Libs.admob
    implementation Libs.playCoreKtx

    implementation Libs.coil

    ktlint Libs.klint

    testImplementation Libs.junit4
    androidTestImplementation Libs.junitExt
    androidTestImplementation Libs.espressoCore
}

kapt {
    correctErrorTypes true
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

sentry {
    autoProguardConfig false
    autoUpload false
    uploadNativeSymbols false
    includeNativeSources false
}

subprojects {
    apply plugin: "org.gradle.android.cache-fix"
}

//apply plugin: 'com.google.gms.google-services'