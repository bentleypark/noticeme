plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.github.ben-manes.versions' version "0.33.0"
}

//apply from: "${rootProject.projectDir}/flavors.gradle"

android {
    compileSdkVersion Config.compileSdkVersion
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.project.noticeme"
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//    with flavorConfig

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    lintOptions {
        abortOnError false
        disable 'UnsafeExperimentalUsageError', 'UnsafeExperimentalUsageWarning', 'ContentDescription'
    }
}

dependencies {
    implementation project(Modules.commonUi)
    implementation project(Modules.commonUtils)
    implementation project(Modules.data)

    implementation Libs.kotlinStdLib
    implementation Libs.appcompat
    implementation Libs.coreKtx
    implementation Libs.constraintlayout
    implementation Libs.material

    implementation Libs.retrofit
    implementation Libs.gson
    implementation Libs.gsonConverter
    implementation Libs.okhttp
    implementation Libs.loggingInterceptor

    implementation Libs.hiltAndroid
    implementation Libs.hiltViewModel
    kapt Libs.hiltAndroidCompiler
    kapt Libs.hiltCompiler

    testImplementation Libs.junit4
    androidTestImplementation Libs.junitExt
    androidTestImplementation Libs.espressoCore
}

kapt {
    useBuildCache = true
    correctErrorTypes true
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}